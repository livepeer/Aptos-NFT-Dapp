import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { Player, useAsset, useAssetMetrics, useCreateAsset } from '@livepeer/react';
import { useState, useCallback, useMemo } from 'react';
import { useDropzone } from 'react-dropzone';
import BarLoader from 'react-spinners/BarLoader';
import styles from '../styles/Home.module.css';

declare global {
  interface Window {
    aptos: any;
  }
}

const Home: NextPage = () => {
  const [video, setVideo] = useState<File | undefined>();

  const {
    mutate: createAsset,
    data: createdAsset,
    status: createStatus,
    uploadProgress,
  } = useCreateAsset();
  const {
    data: asset,
    error,
    status: assetStatus,
  } = useAsset({
    assetId: createdAsset?.id,
    refetchInterval: (asset: any) => (asset?.status?.phase !== 'ready' ? 5000 : false),
  });
  const { data: metrics } = useAssetMetrics({
    assetId: createdAsset?.id,
    refetchInterval: 30000,
  });

  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    if (acceptedFiles && acceptedFiles.length > 0 && acceptedFiles?.[0]) {
      setVideo(acceptedFiles[0]);
    }
  }, []);

  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({
    accept: {
      'video/*': ['*.mp4'],
    },
    maxFiles: 1,
    onDrop,
  });

  const isLoading = useMemo(
    () =>
      createStatus === 'loading' ||
      assetStatus === 'loading' ||
      (asset && asset?.status?.phase !== 'ready'),
    [createStatus, asset, assetStatus]
  );

  const progressFormatted = useMemo(
    () =>
      uploadProgress
        ? `Uploading: ${Math.round(uploadProgress * 100)}%`
        : asset?.status?.progress
        ? `Processing: ${Math.round(asset?.status?.progress * 100)}%`
        : null,
    [uploadProgress, asset?.status?.progress]
  );

  return (
    <div className={styles.container}>
      <Head>
        <title>Aptos NFT Minting Sample Dapp</title>
        <meta name='description' content='Generated by create next app' />
      </Head>
      <div className={styles.connect}>
          <button
            className={styles.buttonConnect}
            type='submit'
            onClick={async () => {
              await window.aptos?.connect();
            }}
          >
            Connect
            <br />
            {isLoading && <BarLoader color='#44d8a7' />}
          </button>
      </div>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <span>Aptos</span>
        </h1>

        <p className={styles.description}>
          This sample application can be used to understand the video NFT minting capabilities
          provided by LivepeerJS
          <p className={styles.link}>
            <a href='https://github.com/livepeer/Aptos-NFT-Dapp'>Github</a>
          </p>
        </p>

        <div>
          <div className={styles.drop} {...getRootProps()}>
            <input {...getInputProps()} />
            <div>
              <p>
                Drag and drop or <span>browse files</span>
              </p>
            </div>
          </div>

          {error?.message && (
            <div>
              <span>{error.message}</span>
            </div>
          )}
        </div>

        <div>
          {video ? <p>{video.name}</p> : <p>Select a video file to upload.</p>}
          {progressFormatted && <p>{progressFormatted}</p>}
        </div>

        <p>
          <button
            className={styles.button}
            type='submit'
            onClick={() => {
              if (video) {
                createAsset({ name: video.name, file: video });
              }
            }}
            disabled={!video || isLoading || Boolean(asset)}
          >
            Mint NFT
            <br />
            {isLoading && <BarLoader color='#44d8a7' />}
          </button>
        </p>

        {asset?.playbackId && (
          <div>
            <p>Preview</p>
            <Player playbackId={asset?.playbackId} autoPlay={false} muted aspectRatio='1to1' />
          </div>
        )}
        {/* {metrics?.metrics?.[0] && <p>Views: {metrics?.metrics?.[0]?.startViews}</p>} */}
      </main>
    </div>
  );
};

export default Home;
